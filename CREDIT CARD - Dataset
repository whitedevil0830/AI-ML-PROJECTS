import numpy as np,pandas as pd,seaborn as sns
import matplotlib.pyplot as plt
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
import plotly.express as px
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("creditcard.csv")

df.head(10)

df.shape

df.isnull().sum()

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.duplicated().sum()

df.shape

for i in df:
    sns.boxplot(y=df[i])
    plt.show()

def rem_out(c):
    sorted(c)
    q1,q3=c.quantile([0.25,0.75])
    IQR=q3-q1
    lr=q1-(1.5*IQR)
    ur=q3+(1.5*IQR)
    return lr,ur

a = ['V1','V2','V3','V4','V5','V6','V7','V8','V9','V10','V11','V12','V13','V14','V15','V16','V17','V18','V19','V20','V21','V22','V23','V24','V25','V26','V27','V28','Amount']
for i in a:
    l,u=rem_out(df[i])
    df[i]=np.where(df[i]>u,u,df[i])
    df[i]=np.where(df[i]<l,l,df[i])

for i in df:
    sns.boxplot(y=df[i])
    plt.show()

sns.countplot(x='Class', data=df)

plt.figure(figsize=(30,18))
sns.heatmap(data=df.corr(),cmap='summer',annot=True)
plt.show()

df['Class'].value_counts()

## Data Splitting

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report,accuracy_score,f1_score,recall_score,precision_score

x=df.drop("Class",axis=1)
y=df[["Class"]]

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=1)

## Logistic Regression

model_1=LogisticRegression()
model_1.fit(x_train,y_train)

model_1_pred = model_1.predict(x_test)
cr = classification_report(model_1_pred,y_test)
print("Classification Report: \n",cr)

## Decision Tree Classifier

model_2 = DecisionTreeClassifier(max_depth=3)
model_2.fit(x_train,y_train)

model_2_pred = model_2.predict(x_test)
cr = classification_report(model_2_pred,y_test)
print("Classification Report: \n",cr)

## Random Forest Classifier

model_3 = RandomForestClassifier(n_estimators=100,max_depth=6)
model_3.fit(x_train,y_train)

model_3_pred = model_3.predict(x_test)
cr = classification_report(model_3_pred,y_test)
print("Classification Report: \n",cr)

# Representation of the results of each model

names = [
    "Logistic Regression",
    "KNN Classifier",
    "Decision Tree",
]

models = [
    model_1,model_2,model_3
]

def score(X_train, y_train, X_test, y_test, names = names, models = models):
    score_df, score_train, score_test = pd.DataFrame(), [], []
    for model in models:
        model.fit(X_train, y_train)
        y_train_pred, y_test_pred = model.predict(X_train), model.predict(X_test)
        score_train.append(accuracy_score(y_train, y_train_pred))
        score_test.append(accuracy_score(y_test, y_test_pred))
    
    score_df["Model"], score_df["Training accuracy"], score_df["Testing accuracy"] = names, score_train, score_test
    return score_df

score(x_train, y_train, x_test, y_test, names = names, models = models)

res = pd.DataFrame({
    'Model':['Logistic Regression','KNN Classifier','Decision Tree'],
    'Accuracy Score':[0.999095,0.999295,0.999518],
    'Accuracy Score (in %)':[99,99,99]})
res=res.sort_values('Accuracy Score')
px.line(data_frame=res,x=res['Model'],y=res['Accuracy Score']*100,title='Model Accuracy Score').show()

# Testing on New data 

l = [model_1,model_2,model_3]
for i in l:
    pipeline = Pipeline(steps=[('s',StandardScaler()), ('m',i)])
    pipeline.fit(x, y)
    print(i)
    print('\nNormal cases:')
    data = [[0,-1.3598071336738,-0.0727811733098497,2.53634673796914,1.37815522427443,-0.338320769942518,0.462387777762292,0.239598554061257,0.0986979012610507,0.363786969611213,0.0907941719789316,-0.551599533260813,-0.617800855762348,-0.991389847235408,-0.311169353699879,1.46817697209427,-0.470400525259478,0.207971241929242,0.0257905801985591,0.403992960255733,0.251412098239705,-0.018306777944153,0.277837575558899,-0.110473910188767,0.0669280749146731,0.128539358273528,-0.189114843888824,0.133558376740387,-0.0210530534538215,149.62],
     [0,1.19185711131486,0.26615071205963,0.16648011335321,0.448154078460911,0.0600176492822243,-0.0823608088155687,-0.0788029833323113,0.0851016549148104,-0.255425128109186,-0.166974414004614,1.61272666105479,1.06523531137287,0.48909501589608,-0.143772296441519,0.635558093258208,0.463917041022171,-0.114804663102346,-0.183361270123994,-0.145783041325259,-0.0690831352230203,-0.225775248033138,-0.638671952771851,0.101288021253234,-0.339846475529127,0.167170404418143,0.125894532368176,-0.00898309914322813,0.0147241691924927,2.69],
     [1,-1.35835406159823,-1.34016307473609,1.77320934263119,0.379779593034328,-0.503198133318193,1.80049938079263,0.791460956450422,0.247675786588991,-1.51465432260583,0.207642865216696,0.624501459424895,0.066083685268831,0.717292731410831,-0.165945922763554,2.34586494901581,-2.89008319444231,1.10996937869599,-0.121359313195888,-2.26185709530414,0.524979725224404,0.247998153469754,0.771679401917229,0.909412262347719,-0.689280956490685,-0.327641833735251,-0.139096571514147,-0.0553527940384261,-0.0597518405929204,378.66]]
    for row in data:
     yhat = pipeline.predict_proba([row])
     result = yhat[0][1]
     print('Predicted=%.3f (expected 0)' % (result))

    print('Fraud cases:')
    data = [[406,-2.3122265423263,1.95199201064158,-1.60985073229769,3.9979055875468,-0.522187864667764,-1.42654531920595,-2.53738730624579,1.39165724829804,-2.77008927719433,-2.77227214465915,3.20203320709635,-2.89990738849473,-0.595221881324605,-4.28925378244217,0.389724120274487,-1.14074717980657,-2.83005567450437,-0.0168224681808257,0.416955705037907,0.126910559061474,0.517232370861764,-0.0350493686052974,-0.465211076182388,0.320198198514526,0.0445191674731724,0.177839798284401,0.261145002567677,-0.143275874698919,0],
     [7519,1.23423504613468,3.0197404207034,-4.30459688479665,4.73279513041887,3.62420083055386,-1.35774566315358,1.71344498787235,-0.496358487073991,-1.28285782036322,-2.44746925511151,2.10134386504854,-4.6096283906446,1.46437762476188,-6.07933719308005,-0.339237372732577,2.58185095378146,6.73938438478335,3.04249317830411,-2.72185312222835,0.00906083639534526,-0.37906830709218,-0.704181032215427,-0.656804756348389,-1.63265295692929,1.48890144838237,0.566797273468934,-0.0100162234965625,0.146792734916988,1],
     [7526,0.00843036489558254,4.13783683497998,-6.24069657194744,6.6757321631344,0.768307024571449,-3.35305954788994,-1.63173467271809,0.15461244822474,-2.79589246446281,-6.18789062970647,5.66439470857116,-9.85448482287037,-0.306166658250084,-10.6911962118171,-0.638498192673322,-2.04197379107768,-1.12905587703585,0.116452521226364,-1.93466573889727,0.488378221134715,0.36451420978479,-0.608057133838703,-0.539527941820093,0.128939982991813,1.48848121006868,0.50796267782385,0.735821636119662,0.513573740679437,1]]
    for row in data:
     yhat = pipeline.predict_proba([row])
     result = yhat[0][1]
     print('Predicted=%.3f (expected 1)' % (result))
    print('\n')
